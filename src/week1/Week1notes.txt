Instructor
Name: James Gappy
E-Mail Address: jgappy@gmail.com
Virtual Office Hours: Flexible, will respond to email within 48 hrs.


3 projects

COURSE OBJECTIVES

Building on “Java Programming III: Intermediate Java Programming”, you will cover all of the specific topics in the Oracle Certified Professional 
Java Programmer (OCPJP) exam, including the Java runtime environment, generic collections, thread handling and synchronization, native methods, 
standard file IO (java.io), socket-based network programming and serialization (java.net), and Java Remote Method Invocation (RMI). You will apply 
object-oriented techniques (interfaces, abstract classes, inner classes, etc.) to create applications using Swing components (javax.swing) and appropriate 
Javadoc comments. Additional topics include New I/O, JNI, and unit testing with JUnit.

Course Highlights:

-Effective Java
-The Java Virtual Machine (JVM) - Managing Object Creation, Execution and Garbage Collection
-Reflection
-Annotations
-Unit testing using JUnit
-Generics Collections
-Java I/O - Streams and Files
-Concurrent Programming - Thread handling and Synchronization
-Java Networking with Sockets
-Distributed Java Applications - Webstart, RMI, JNI
-Java Security

Course Benefits:

-Understand how to be a more effective Java developer
-Learn advanced Java concepts and apply them in the real world
-Gain the knowledge to prepare yourself for the Oracle Java certification exam


LESSONS - on blackboard


Lesson 1:  
Syllabus, Introductions, JVM (Managing Object Creation, Execution and Garbage Collection)

Lesson 2:
Reflection basics, Annotations, Unit testing using JUnit


Eclipse: (best one for this application)
Eclipse IDE for Java Developers


Lesson starts - 

source code = .java
byte code = .class


native methods = will talk about these later


What is the difference between "stack" and "heap" memory? RESEARCH
- HEAP :: memory used to store objects during execution (variable)
- STACK :: memory used to store variables	(reference variable to the variable)

Follow the class path loader example slides

# javap is the java class file disassembler


Example (examines bytecode(.class),  has to be compiled, gives detailed information on the bytecode)
# javap -s -verbose TestGC => (this is a class)


ticketsatwork.com sign up for discounted tickets


edit arguments in eclipse// heap size arguments


# jconsole
# jvisualvm



JMX


Reference Objects----------

Assignment 1:


-------------------------------------
Study 
-------------------------------------

source code =  class files as .java
bytecode = compiled java source-code as .class files
JVM interprets the .class files



-Compiled Java bytecode is executed by the Java runtime interpreter
-It executes a stack-based instruction set and manages memory like an OS
-Java specifies the sizes and mathematical properties for all its primitive data types rather than leaving it up to the platform implementation
-The fundamental unit of Java code is the class
-Classes are application components that hold executable code and data
-Compiled Java classes are distributed ina universal binary format that contain Java bytecode and other clas information

-Java is a statically typed, late binding language. Every object in Java jad a well-defined type tat is known at compile time.
	-ie, Java compiler does static type checking analysis
	-Java compiler prevents you from using uninitialized variables and creating unreachable statements 
	-Java is fully runtime-typed as well, which keeps track of all objects, which makes it possible to determine their types and relationships during execution

Dynamic Memory Management
-Java manages all memory, maintains objects in memory, and the Java runtime system keeps track of all references to those objects
-Java doesn't have pointers, it uses references, which is a safer kind of pointer.
	-A reference is a strongly typed handle for an object
	-All objects, with the exception of primitive numeric types are accessed through references
	
Error Handling

Threads

----
Chapter 1:: Java: A Virtual Machine

- Java is both a compiled and interpreted language
	- compiled: translating source-code to machine code
	- interpreted: executes a set of instructions directly without compiling
- Source-code is turned into binary instructions, called byte-code
- Fundamental unit of java-code is the class
- Classes hold executable code and data
- Classes are located and loaded dynamically at runtime as they are needed by the application

Safety of Design
	-Type Safety and Method Binding: Java is a statically typed, late binding language. Java runtime system keeps track of all objects and makes it possible to determine their types and relationships
	-Incremental Development:
	-Dynamic Memory Management
	-Error Handling
	-Threads
	-Scalability
	
Safety of Implementation

The Java security model wraps 3 layers of protection around imported classes:

'untrusted source' ==> Java Binary | Verifier | Class Loader | Security Manager | System Resources.

	- The Java bytecode verifier is a fixed part of the Java runtime system.

	The Verifier:
		- first line of defense is the "bytecode verifier"
		- makes sure code is well behaved, & obeys the basic rules
		- Verified code, 
			- cannot forge references or violate access permissions on an object
			- cannot perform illegal casts or use object in unintended ways
			- cannot cause certain errors, such as overflowing or underflowing the internal stack
		
	Class Loader:
		- is responsible for bringing the bytecode for Java clases into the interpreter
		- after a class has been loaded and passed through the verifier, it remains associated with its class loader. Therefore classes are effectively partitioned into separate namespaces based on their origin
		- 
	
	Security Manager:
		- is responsible for making application-level security decisions.
		- is an object that can be installed by an application to restrict access to system resources
		- SM is consulted every time the application tries to access items such as the filesystem, network ports, external processes
		
Application an User-Level Security

		
		
Examples of code from the textbook:
https://github.com/patniemeyer/learningjava

Chapter 2:: A First Application - All the HelloJava applications exercises

Classes
- are the fundamental building blocks of most object oriented languages
- is a group of data items with associated functions to perform operations
- data items in a class are called 'variables'
- functions are called 'methods'

Objects
- are abstract entities

Variables and Class Types
- every class defines a new 'type'(data type)
- class type variables are 'references' to objects
	- a reference is a pointer to or a handle for an object

Inheritance
- java classes are arranged in a parent-child hierarchy aka superclass/subclass respectively
- a subclass may inherit some or all the variables and methods of its superclass

Components and Containers
- are terms to describe graphical elements
- Component is a base class from which all Java's GUI components are derived
- Container is a class and an extended type of Component
- the Container causes its children to be displayed and arrandes them on the screen according to a particular layout strategy

Layout
- a LayoutManager is an object which determines the location within the container for displaying another object


Static Members
- static variables and static methods are shared among all instances of the class
- these do not change, and the common use of a static variable in a class is to hold predefined constants or unchanging objects that all instances can use

Threads
- is a separate flow of control within a program. 
- multithreading is a way for an application to handle many different tasks at the same time.


Chapter 3:: Tools of the trade

Java JVM
- implements the Java runtime system and executes the Java application
- usually the interpreter itself it a native application 


System Properties
- allows any number of system property values to ne passed to the application when the VM is started
- System properties are name:value pairs and are available to the application througn the static System.getProperty() method.
- System.properties is passed to the interpreter on the command line using the -D option
	Example # java -Dstreet=sesame -Dscene=alley animals.bird.BigBird
	
	The value of the street property is the accessible this way:
	
	String street = System.getProperty("street");
	
The Classpath
- the CLASSPATH environment variable is a list of the locations that are searched for by the Java Class files
- an element in a classpath can be a directory or a JAR file. could be ZIP but ZIP and JAR are really the same thing

Tools
- javap prints a description of a compiled class
	# javap java.awt.Color
	# javap java.util.Stack
- also used for debugging classpath problems
- -c option print the JVM instruction for each method in the class

- javac :: Java compiler in the JDK
- turns source-code into a compiled class that contains the Java bytecode
- source-code are named with the .java extension
- bytecode are named with the .class extension 
- Java interpreter takes a class name is its argument
- javac takes a .java file as its extension


Jar Files
- Java archive, standard way and portable way to pack up all parts of your application into a compact bundle
- java zip files, java archive files
- a JAR file can also carry a digital signature, can be attached to the whole file or individual components
- jar utility creates and reads jar files
- the Java runtime system can load class files directly from an archive
- nonclass files (data, images) can also be retrieved using the .getResource()
 
	# jar -cvf jarFile path		=> create
	# jar -tvf jarFile path 	=> list
	# jar -xvf jarFile parh		=> extract

Example:
- you completed a new game, spaceblaster.
- the classes are located in spaceblaster/game
- the images are located in spaceblaster/images
- the data is conatined in spaceblaster/docs
- to compress run the following command:

	# jar -cvf spaceblaster.jar spaceblaster
	
	to list:
	
	# jar -tvf spaceblaster.jar
	
	to extract an individual file:
	
	# jar -xvf spaceblaster.jar filename
	
JAR Manifest:
- the jar command adds a directory called META-INF/	to archive
- this directory holds files describing the contents of the .jar file
- it must contain at least one file MANIFEST.MF
- contains data as keyword:value pairs
- must contain at least one line, location of tje primary main():

	Main-Class: com.oreilly.game
	
- can contain other information:
	
	Manifest-Version: 1.0
	Created-By: 1.7.0_07 (Oracle Corporation) 

- can also contain hash information:
	
	Name: com/oreilly/Test.class
	SHA1-Digest: dF2Dgj4lkviifJio894nJondliUbosX=

Pack2000 - compression utility
- achieves over 4x compression over zip utilities

Policy Files
- in Java security is built into the language
- the JVM can verify class files, and Java's Security Manager can impose limits on what classes can do.
- the system allows you to write policy files which tells the security manager what to allow / deny & for whom

Default Security Manager
- create EvilEmpire.java that makes a socket connection to a remote host

	# java EvilEmpire
	Connected!
	
	Now run policy
	# java -Djava.security.manager EvilEmpire
	SecurityException: could not connect!
	
Policy Tool # policytool
- page 80

*** Doesn't work for some reason























